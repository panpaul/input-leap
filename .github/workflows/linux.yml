name: Build Tests For Linux

on:
  release:

  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build_release:
        description: 'Build Release binaries'
        required: false
        type: boolean

# Set the build type here
env:
  B_BUILD_TYPE: ${{ (inputs.build_release || github.event_name == 'release') && 'Release' || 'Debug' }}
  DEBIAN_FRONTEND: noninteractive

jobs:
  linux-build:
    runs-on: ubuntu-latest
    container: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu:18.04", "ubuntu:20.04", "ubuntu:22.04"]
        cc: ["gcc"]
        wayland: [false]
        include:
          - cc: "gcc"
            cxx: "g++"
          - os: "ubuntu:22.04"
            cc: "clang"
            cxx: "clang++"
          - os: "ubuntu:22.04"
            wayland: true

    steps:
      # Preparation steps
      - if: matrix.os == 'ubuntu:18.04'
        name: Add repositories with newer git and cmake
        run: |
          apt-get update -y
          # software-properties-common is needed for add-apt-repository
          apt-get install -y software-properties-common gpg wget
          # actions/checkout@v3 wants newer git than what's in default repositories
          add-apt-repository ppa:git-core/ppa
          # InputLeap requires at least CMake 3.12.
          # This mirrors instructions at https://apt.kitware.com
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
            | gpg --dearmor - \
            > /usr/share/keyrings/kitware-archive-keyring.gpg
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' \
            > /etc/apt/sources.list.d/kitware.list

      - name: Update image and install pre-reqs
        run: |
          apt-get update -y
          apt-get dist-upgrade -y
          apt-get install -y \
                  cmake \
                  g++ \
                  clang \
                  git \
                  libavahi-compat-libdnssd-dev \
                  libcurl4-openssl-dev \
                  libice-dev \
                  libsm-dev \
                  libssl-dev \
                  libxinerama-dev \
                  libxrandr-dev \
                  libxtst-dev \
                  libxkbcommon-dev \
                  libglib2.0-dev \
                  ninja-build \
                  qtdeclarative5-dev \
                  qttools5-dev

      - if: matrix.wayland
        name: Install libei and libportal pre-reqs
        run: |
          apt-get install -y \
                  ca-certificates \
                  dbus \
                  gettext \
                  git \
                  libgirepository1.0-dev \
                  libglib2.0 \
                  libgtk-3-dev \
                  libprotobuf-c-dev \
                  libsystemd-dev \
                  meson \
                  protobuf-c-compiler \
                  protobuf-compiler \
                  python3-attr \
                  python3-dbusmock \
                  python3-jinja2 \
                  python3-pip \
                  python3-pytest \
                  python3-jinja2 \
                  valac

      # Code checkout steps
      - name: Checkout input-leap
        if: matrix.os != 'ubuntu:18.04'
        uses: actions/checkout@v4
        with:
          path: input-leap
          submodules: recursive
          set-safe-directory: ${{ github.workspace }}

      - name: Checkout input-leap
        if: matrix.os == 'ubuntu:18.04'
        uses: actions/checkout@v3
        with:
          path: input-leap
          submodules: recursive
          set-safe-directory: ${{ github.workspace }}

      - name: Get libei v1.0.0 from freedesktop
        # Manual checkout of libinput/libei ref 1.0.0 from https://gitlab.freedesktop.org
        # because actions/checkout does not support gitlab
        if: matrix.wayland
        run: |
          git clone --depth=1 --branch="$ref" --recurse-submodules -- \
            "https://gitlab.freedesktop.org/libinput/libei" libei
        env:
          ref: 1.0.0

      - name: Get libportal from whot/libportal
        uses: actions/checkout@v4
        if: matrix.wayland
        with:
          repository: whot/libportal
          ref: wip/inputcapture
          path: libportal

      - if: matrix.wayland
        name: build libei from git tag (1.0.0)
        run: |
            meson setup -Dprefix=/usr -Dtests=disabled -Dliboeffis=disabled -Ddocumentation=[] libei _libei_builddir
            ninja -C _libei_builddir install

      - if: matrix.wayland
        name: build libportal
        run: |
            meson setup --prefix=/usr -Dbackend-gtk3=enabled -Ddocs=false libportal _libportal_builddir
            ninja -C _libportal_builddir install

      - name: Configure the build
        run: |
          cmake -DCMAKE_BUILD_TYPE="${B_BUILD_TYPE}" -S input-leap -B build \
                -DCMAKE_CXX_FLAGS:STRING="-Wall -Wextra -Wno-unused-parameter" \
                -DCMAKE_CXX_FLAGS_DEBUG:STRING="-g -Werror" \
                -DINPUTLEAP_BUILD_LIBEI:BOOL=${{ matrix.wayland }}
        env:
            VERBOSE: 1
            CC: ${{ matrix.cc }}
            CXX: ${{ matrix.cxx }}

      - name: Run the build
        run: |
          cmake --build build --parallel
        env:
            VERBOSE: 1

      # Finally, test step!
      - name: Run the tests
        run: |
            ctest --test-dir build --verbose
